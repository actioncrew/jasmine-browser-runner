#!/usr/bin/env node
import path from 'path';
import { createViteJasmineRunner } from '../lib/index.js'; // your ViteJasminePreprocessor
import yargs from 'yargs/yargs';
import { hideBin } from 'yargs/helpers';

(async () => {
  try {
    const argv = yargs(hideBin(process.argv))
      .usage('Usage: $0 [options]')
      .option('src', {
        alias: 's',
        type: 'string',
        describe: 'Directory containing source TypeScript files',
        default: './src',
      })
      .option('tests', {
        alias: 't',
        type: 'string',
        describe: 'Directory containing test files',
        default: './tests',
      })
      .option('out', {
        alias: 'o',
        type: 'string',
        describe: 'Output directory for built JS files',
        default: '.vite-jasmine-build',
      })
      .option('port', {
        alias: 'p',
        type: 'number',
        describe: 'HTTP port for test server',
        default: 8888,
      })
      .option('watch', {
        alias: 'w',
        type: 'boolean',
        describe: 'Watch files and rebuild on changes',
        default: false,
      })
      .option('browser', {
        type: 'string',
        describe: 'Browser name to launch (chrome, firefox, etc.)',
        default: 'chrome',
      })
      .help()
      .argv;

    // Resolve absolute paths
    const srcDir = path.resolve(argv.src);
    const testDir = path.resolve(argv.tests);
    const outDir = path.resolve(argv.out);

    console.log('üöÄ Starting TypeScript Test Runner...');
    console.log('üìÅ Source directory:', srcDir);
    console.log('üìÅ Test directory:', testDir);
    console.log('üìÅ Output directory:', outDir);
    console.log('üåê Test server port:', argv.port);
    console.log('üëÄ Watch mode:', argv.watch);

    const runner = createViteJasmineRunner({
      srcDir,
      testDir,
      outDir,
      watch: argv.watch,
      port: argv.port,
      browser: argv.browser,
    });

    await runner.start();

    // Handle graceful shutdown
    const shutdown = async (signal) => {
      console.log(`\nüõë Received ${signal}, stopping runner...`);
      await runner.stop?.();
      process.exit(0);
    };
    process.on('SIGINT', () => shutdown('SIGINT'));
    process.on('SIGTERM', () => shutdown('SIGTERM'));

  } catch (err) {
    console.error('‚ùå Test runner failed:', err);
    process.exit(1);
  }
})();
